# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: true



    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']



    security.apikey_authenticator:
        class:  'AppBundle\Security\ApiKeyAuthenticator'
        arguments: ['%timeout%', '%apikey_field%']
        public: false

    security.apikey_user_provider:
        class: 'AppBundle\Security\ApiKeyUserProvider'
        calls:
            - [setContainer, ['@service_container']]


    auth.token_manager:
        class: 'AppBundle\Service\TokenManager'
        arguments: ['@service_container', '%apikey_field%','%token_class%']

    auth.user_manager:
        class: 'AppBundle\Service\UserManager'
        arguments: ['@auth.password_updater','@doctrine.orm.entity_manager','%user_class%']
        calls:
            - [setContainer, ['@service_container']]

    auth.password_updater:
        class: 'AppBundle\Util\PasswordUpdater'
        arguments: ['@auth.password_service']

    auth.password_service:
        class: AppBundle\Service\PasswordService

    app.api_response:
        class: AppBundle\Response\ApiResponse
        arguments: ["@service_container","@fos_rest.view_handler"]

    app.exception_listener:
        class: AppBundle\EventListener\ExceptionListener
        arguments: [ '@kernel','@app.api_response']
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 200 }

    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    app.soft_delete_listener:
        class: AppBundle\EventListener\SoftDeleteListener
        tags:
            - { name: doctrine.event_listener, event: preSoftDelete, connection: default }
        calls:
            - [ setContainer, [ "@service_container" ] ]


